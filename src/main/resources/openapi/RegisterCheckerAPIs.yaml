openapi: 3.0.0
info:
  title: Register Checker APIs
  version: '2.1.0'
  description: -|
    Requests checks and responses from EMS systems to validate elector details exists within the EMS.
    For change history see
    https://github.com/communitiesuk/eip-ero-register-checker-api/blob/main/src/main/resources/openapi/RegisterCheckerAPIs.yaml
  contact:
    name: Duncan Elder
    email: Duncan.Elder@levellingup.gov.uk
servers:
  - url: 'http://localhost:3000'
  - url: 'https://api.registerchecker.dev.erop.ierds.uk'
  - url: 'https://api.registerchecker.int.erop.ierds.uk'
  - url: 'https://api.registerchecker.test.erop.ierds.uk'
  - url: 'https://api.registerchecker.erop.ierds.uk'
  - url: 'https://api.registerchecker.dev.eip.erop.ierds.uk'
  - url: 'https://api.registerchecker.int.eip.erop.ierds.uk'
  - url: 'https://api.registerchecker.test.eip.erop.ierds.uk'
  - url: 'https://api.registerchecker.beta.eip.erop.ierds.uk'
#
# --------------------------------------------------------------------------------
#
paths:
  #
  # --------------------------------------------------------------------------------
  # RESTful style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Register Checks
  # --------------------------------------------------------------------------------
  /registerchecks:
    parameters:
      - name: pageSize
        description: The maximum number of Pending Register Checks to return
        schema:
          type: integer
          minimum: 1
          maximum: 500
          default: 100
        example: 100
        in: query
        required: false
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Register Checks
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Get Pending Register Checks
      description: Retrieve list of pending register check requests for the connected EMS system.
      operationId: get-pending-register-checks
      tags:
        - Register Checks
      responses:
        '200':
          $ref: '#/components/responses/PendingRegisterChecks'
        '404':
          description: Error response describing the resource not found.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  timestamp:
                    type: string
                    format: date-time
                    example: '2022-09-28T18:01:42.105Z'
                  status:
                    type: integer
                    example: 404
                  error:
                    type: string
                    example: 'Not Found'
                    maxLength: 500
                  message:
                    type: string
                    example: 'EROCertificateMapping for certificateSerial=[543212222] not found'
                    maxLength: 500
                required:
                  - timestamp
                  - status
                  - error
                  - message
      security:
        - emsCertificateLambdaAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/registerchecks
        requestParameters:
          integration.request.header.client-cert-serial: "context.authorizer.client-cert-serial"
          integration.request.header.x-request-id: context.requestId
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET

  #
  # Admin Register Checks
  # --------------------------------------------------------------------------------
  /admin/pending-checks/{eroId}:
    parameters:
      - name: eroId
        description: The ID of the Electoral Registration Office whose checks to query
        schema:
          type: string
        example: 100
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Register Checks
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Admin Get Pending Register Checks
      description: Retrieve list of pending register check requests for a particular ERO.
      operationId: admin-get-pending-register-checks
      tags:
        - Register Checks
      responses:
        '200':
          $ref: '#/components/responses/AdminPendingRegisterChecks'
        '404':
          description: Error response describing the resource not found.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  timestamp:
                    type: string
                    format: date-time
                    example: '2022-09-28T18:01:42.105Z'
                  status:
                    type: integer
                    example: 404
                  error:
                    type: string
                    example: 'Not Found'
                    maxLength: 500
                  message:
                    type: string
                    example: 'ERO ero-id not found'
                    maxLength: 500
                required:
                  - timestamp
                  - status
                  - error
                  - message
      security:
        - awsIamAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/admin/pending-checks/{eroId}
        requestParameters:
          integration.request.path.eroId: method.request.path.eroId
          integration.request.header.x-request-id: context.requestId
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET

  #
  # Single Register Check
  # --------------------------------------------------------------------------------
  '/registerchecks/{requestid}':
    parameters:
      - name: requestid
        description: The request id from the originating Pending Register Check Request.
        schema:
          type: string
          format: uuid
        example: 9477c3c2-303f-11ed-a261-0242ac120002
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Single Register Check
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Update Pending Register Check
      description: -|
        The EMS system's response to an individual Register Check. 
        Updates a pending Register Check with the outcome of the check.
      operationId: update-pending-register-check
      tags:
        - Single Register Check
      requestBody:
        $ref: '#/components/requestBodies/RegisterCheckResult'
      responses:
        '201':
          description: Pending Register Check updated successfully.
        '400':
          description: Error response describing fields in the request payload that are in error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  timestamp:
                    type: string
                    format: date-time
                    example: '2022-09-28T18:01:42.105Z'
                  status:
                    type: integer
                    example: 400
                  error:
                    type: string
                    example: 'Bad Request'
                    maxLength: 500
                  message:
                    type: string
                    example: 'Validation failed for object=''registerCheckResultRequest''. Error count: 1'
                    maxLength: 500
                  validationErrors:
                    type: array
                    items:
                      type: string
                      maxLength: 500
                    example:
                      - 'Error on field ''gssCode'': rejected value [1234], must match "^[a-zA-Z]\d{8}$"'
                required:
                  - timestamp
                  - status
                  - error
                  - message
      security:
        - emsCertificateLambdaAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/registerchecks/{requestid}
        requestParameters:
          integration.request.path.requestid: "method.request.path.requestid"
          integration.request.header.client-cert-serial: "context.authorizer.client-cert-serial"
          integration.request.header.x-request-id: context.requestId
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: POST

#
# --------------------------------------------------------------------------------
#
components:
  #
  # Schema and Enum Definitions
  # --------------------------------------------------------------------------------
  schemas:
    ErrorResponse:
      title: ErrorResponse
      description: Response describing errors in a web request
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2022-09-28T18:01:42.105Z'
        status:
          type: integer
          example: 400
        error:
          type: string
          example: 'Bad Request'
          maxLength: 500
        message:
          type: string
          example: 'Validation failed for object=''registerCheckResultRequest''. Error count: 1'
        validationErrors:
          type: array
          items:
            type: string
            maxLength: 500
          example:
            - 'Error on field ''gssCode'': rejected value [1234], must match "^[a-zA-Z]\d{8}$"'
      required:
        - timestamp
        - status
        - error
        - message

    PendingRegisterChecksResponse:
      title: PendingRegisterChecksResponse
      description: Response containing pending Register Checks for the calling ERO's EMS system.
      properties:
        pageSize:
          type: integer
          default: 100
        registerCheckRequests:
          description: The list of Pending Register Checks
          type: array
          items:
            $ref: '#/components/schemas/PendingRegisterCheck'
      required:
        - pageSize
        - registerCheckRequests

    AdminPendingRegisterChecksResponse:
      title: AdminPendingRegisterChecksResponse
      description: Response containing pending Register Checks for a particular ERO.
      properties:
        pendingRegisterChecks:
          description: The list of Pending Register Checks
          type: array
          items:
            $ref: '#/components/schemas/AdminPendingRegisterCheck'
      required:
        - pendingRegisterChecks

    PendingRegisterCheck:
      title: PendingRegisterCheck
      type: object
      description: An object describing a pending request for a check against the Electoral Register
      properties:
        requestid:
          type: string
          description: A unique identifier for this check against the Electoral Register.
          format: uuid
          example: 9477c3c2-303f-11ed-a261-0242ac120002
        source:
          $ref: '#/components/schemas/SourceSystem'
        gssCode:
          type: string
          pattern: '^[a-zA-Z]\d{8}$'
          description: The Local Authority GSS Code that manages the Electoral Register.
          example: E06000001
        actingStaffId:
          type: string
          description: |-
            Indicates who/what initiated the register check request.
            Where EROP creates the request automatically this will be "EROP". 
            Should there be a need to manually force an additional check, this will indicate the id/email address 
            of the ERO user who triggered the request (for auditing purposes).
          example: EROP
        createdAt:
          type: string
          description: The date and time this request to check the Electoral Register was generated
          format: date-time
          example: 2022-09-07T14:14:55.123Z
        emsElectorId:
          type: string
          description: |-
            A stable unique id of an elector within the EMS to allow ID matching of an individual elector.
            If supplied, the EMS system should only use this value to perform a lookup
            within their system. All other search fields should be ignored.
          maxLength: 50
        historicalSearch:
          type: boolean
          default: false
          description: |-
            Indicated the search is in relation to an Overseas elector application.
            For ERO's to determine Overseas applications, they need to know if the applicant is already on the current register as an Overseas elector, or 
            if they existed on any historical registers, therefore current and historical registers must be searched.
        fn:
          type: string
          description: The applicant's first name
          example: Fred
          minLength: 1
          maxLength: 35
        mn:
          type: string
          description: The applicant's middle name(s)
          example: Cuthbert
          minLength: 1
          maxLength: 100
        ln:
          type: string
          description: The applicant's surname
          example: Bloggs
          minLength: 1
          maxLength: 35
        dob:
          type: string
          description: The applicant's date of birth (ISO-8601 format)
          format: date
          example: 1995-03-02
        regproperty:
          type: string
          example: Aviation House
          maxLength: 255
        regstreet:
          type: string
          example: 125 Kingsway
          minLength: 1
          maxLength: 255
        reglocality:
          type: string
          example: Camden
          maxLength: 255
        regtown:
          type: string
          example: London
          maxLength: 255
        regarea:
          type: string
          example: Greater London
          maxLength: 255
        regpostcode:
          type: string
          example: SW112DR
          minLength: 1
          maxLength: 10
        reguprn:
          type: string
          pattern: '^\d{1,12}$'
          maxLength: 12
          example: 0987654321
        phone:
          type: string
          description: The applicant's phone number for contact purposes.
          example: 01234 567890
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 255
          description: The applicant's email address for contact purposes.
      required:
        - requestid
        - source
        - gssCode
        - actingStaffId
        - createdAt
        - fn
        - ln
        - regstreet
        - regpostcode

    AdminPendingRegisterCheck:
      title: AdminPendingRegisterCheck
      type: object
      description: |-
        An object describing a pending request for a check against the Electoral Register.
        Intended for viewing by EROP admins, and does not include personal information.
      properties:
        applicationId:
          type: string
          description: The ID of the application that this check has been created for.
          format: string
          example: 1f0f76a9a66f438b9bb33070
        gssCode:
          type: string
          pattern: '^[a-zA-Z]\d{8}$'
          description: The Local Authority GSS Code that manages the Electoral Register.
          example: E06000001
        sourceType:
          $ref: '#/components/schemas/SourceType'
        createdAt:
          type: string
          description: The date and time this request to check the Electoral Register was generated
          format: date-time
          example: 2022-09-07T14:14:55.123Z
        historicalSearch:
          type: boolean
          default: false
          description: |-
            Indicated the search is in relation to an Overseas elector application.
            For ERO's to determine Overseas applications, they need to know if the applicant is already on the current register as an Overseas elector, or 
            if they existed on any historical registers, therefore current and historical registers must be searched.
      required:
        - applicationId
        - gssCode
        - sourceType
        - createdAt

    SourceSystem:
      title: SourceSystem
      description: The source system of the Application
      enum:
        - EROP

    SourceType:
      title: SourceType
      description: The source type of the Application
      enum:
        - VOTER_CARD
        - POSTAL_VOTE
        - PROXY_VOTE
        - OVERSEAS_VOTE
        - APPLICATIONS_API

    RegisterCheckResultRequest:
      title: RegisterCheckResultRequest
      type: object
      description: The outcome of an ERO's EMS system's Register Check.
      properties:
        requestid:
          type: string
          description: The request ID from the originating Pending Register Check Response.
          format: uuid
          example: 9477c3c2-303f-11ed-a261-0242ac120002
        gssCode:
          type: string
          pattern: '^[a-zA-Z]\d{8}$'
          description: The Local Authority GSS Code from the originating Pending Register Check Response.
          example: E06000001
        createdAt:
          type: string
          description: The date and time this request to update the Pending Register Check was generated.
          format: date-time
          example: 2022-09-07T14:14:55.123Z
        registerCheckMatchCount:
          type: integer
          description: The number of possible matches found in the Electoral Register for the details in the request. If 10 or fewer matches were found, each should be returned in the “registerCheckMatches” array below. If more than 10 matches were found, the “registerCheckMatches” array should be omitted.
          example: 10
        historicalSearchEarliestDate:
          type: string
          description: -|
            The oldest date the EMS was able search within all/historical registers.
            This will aid ERO's ability to process Overseas applications. 
            As part of the Elector's Overseas application they can provide an estimated last registered date. 
            Where an EMS does not have records that go as far back as the Elector has
            indicated, supplying this value to the ERO would allow them to make better informed decisions
            about what next steps to perform to approve or reject applications. 
          format: date-time
          example: 1996-09-07
        registerCheckMatches:
          type: array
          description: Each record in “registerCheckMatches” represents one potential match within the EMS that could represent the Elector in the Register Check Request
          items:
            $ref: '#/components/schemas/RegisterCheckMatch'
      required:
        - requestid
        - gssCode
        - createdAt
        - registerCheckMatchCount

    RegisterCheckMatch:
      title: RegisterCheckMatch
      type: object
      description: Register Check Match response from the EMS system.
      properties:
        emsElectorId:
          type: string
          minLength: 1
          maxLength: 50
          description: The stable unique id of the elector provided by the EMS client.
        fn:
          type: string
          description: The applicant's first name
          example: Fred
          minLength: 1
          maxLength: 35       
        mn:
          type: string
          description: The applicant's middle name(s)
          example: Cuthbert
          maxLength: 100      
        ln:
          type: string
          description: The applicant's surname
          example: Bloggs
          minLength: 1
          maxLength: 35          
        dob:
          type: string
          description: The applicant's date of birth (ISO-8601 format)
          format: date
          example: "1995-03-02"
        regproperty:
          type: string
          example: Aviation House
          maxLength: 255
        regstreet:
          type: string
          example: 125 Kingsway
          maxLength: 255          
        reglocality:
          type: string
          example: Camden
          maxLength: 255      
        regtown:
          type: string
          example: London
          maxLength: 255
        regarea:
          type: string
          example: Greater London
          maxLength: 255
        regpostcode:
          type: string
          example: SW112DR
          minLength: 1
          maxLength: 10          
        reguprn:
          type: string
          pattern: '^\d{1,12}$'
          maxLength: 12
          example: 0987654321
        phone:
          type: string
          description: The applicant's phone number for contact purposes.
          example: 01234 567890
          maxLength: 50   
        email:
          type: string
          description: The applicant's email address for contact purposes.
          maxLength: 255          
        registeredStartDate:
          type: string
          description: ISO-8601 format. The date the match was registered.
          format: date
          example: 2022-09-01
        registeredEndDate:
          type: string
          description: ISO-8601 format. The date the match was deregistered.
          format: date
          example: 2023-09-01
        applicationCreatedAt:
          type: string
          description: ISO-8601 format. Optional date and time the application was received, if the application is pending. This may be presented to the ERO user to assist their decisions.
          format: date-time
          example: 2022-09-07T14:14:55.123Z
        attestationCount:
          type: integer
          description: The number of Electors this match has attested for another Elector, in the past year.
        franchiseCode:
          type: string
          description: Franchise codes indicate the electors voting eligibility within different elections, i.e. national or local elections.
          maxLength: 50
        postalVote:
          $ref: '#/components/schemas/PostalVote'
        proxyVote:
          $ref: '#/components/schemas/ProxyVote'
      required:
        - emsElectorId
        - fn
        - ln
        - regstreet
        - regpostcode
        - attestationCount
        - franchiseCode

    PostalVote:
      type: object
      properties:
        postalVoteUntilFurtherNotice:
          type: boolean
        postalVoteForSingleDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a postal vote for the election(s) and referendum(s) to be held on the specified date.
          format: date
          example: 2022-02-02
        postalVoteStartDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a postal vote for the period defined by the two dates.
          format: date
          example: 2022-02-02
        postalVoteEndDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a postal vote for the period defined by the two dates.
          format: date
          example: 2022-02-02
        ballotproperty:
          type: string
          description: The property name of the address to which the applicant has requested the ballot paper is sent (if different to their registered address).
          maxLength: 255
        ballotstreet:
          type: string
          description: The street of the address to which the applicant has requested the ballot paper is sent (if different to their registered address - required if so).
          maxLength: 255
        ballotlocality:
          type: string
          description: The localtiy of the address to which the applicant has requested the ballot paper is sent (if different to their registered address).
          maxLength: 255
        ballottown:
          type: string
          description: The town of the address to which the applicant has requested the ballot paper is sent (if different to their registered address).
          maxLength: 255
        ballotarea:
          type: string
          description: The area of the address to which the applicant has requested the ballot paper is sent (if different to their registered address).
          maxLength: 255
        ballotpostcode:
          type: string
          example: SW112DR
          description: The postcode of the address to which the applicant has requested the ballot paper is sent (if different to their registered address - required if so).
          maxLength: 10
        ballotuprn:
          type: string
          pattern: '^\d{1,12}$'
          maxLength: 12
          example: 0987654321
          description: The UPRN of the address to which the applicant has requested the ballot paper is sent (if different to their registered address).
        ballotAddressReason:
          type: string
          description: |
            Required only if “ballot” address given. The reason the applicant gave for using a different address for the ballot paper (max 500 utf-8 chars)
          maxLength: 500
    ProxyVote:
      type: object
      description: Details of existing proxy vote arrangement, all fields should be provided if suitable data is available.
      properties:
        proxyVoteUntilFurtherNotice:
          type: boolean
          description: True if the elector has a proxy vote until further notice.
        proxyVoteForSingleDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a proxy vote for the election(s) and referendum(s) to be held on the specified date.
          format: date
          example: 2022-02-02
        proxyVoteStartDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a proxy vote for the period defined by the two dates.
          format: date
          example: 2022-02-02
        proxyVoteEndDate:
          type: string
          description: Date in ISO-8601 format. If set, the elector has a proxy vote for the period defined by the two dates.
          format: date
          example: 2022-03-02
        proxyfn:
          type: string
          description: First name of the chosen proxy.
          maxLength: 35          
        proxymn:
          type: string
          description: (Optional) Middle name(s) of the chosen proxy.
          maxLength: 100
        proxyln:
          type: string
          description: Last name of the chosen proxy.
          maxLength: 35          
        proxyfamilyrelationship:
          type: string
          description: (Optional) The family relationship (if any) of the chosen proxy. The question to users is “What is your proxy’s relationship to you?”
          maxLength: 500
        proxyproperty:
          type: string
          description: The property of the address of the chosen proxy as supplied by the applicant.
          maxLength: 255
        proxystreet:
          type: string
          description: (Required) The street of the address of the chosen proxy as supplied by the applicant.
          maxLength: 255
        proxylocality:
          type: string
          description: The locality of the address of the chosen proxy as supplied by the applicant.        
          maxLength: 255          
        proxytown:
          type: string
          description: The town of the address of the chosen proxy as supplied by the applicant.        
          maxLength: 255          
        proxyarea:
          type: string
          description: The area of the address of the chosen proxy as supplied by the applicant.        
          maxLength: 255          
        proxypostcode:
          type: string
          example: SW112DR
          description: (Mandatory if UK proxy) The postcode of the address of the chosen proxy as supplied by the applicant.
          maxLength: 10          
        proxyuprn:
          type: string
          pattern: '^\d{1,12}$'
          maxLength: 12
          example: 0987654321
          description: The UPRN of the address of the chosen proxy as supplied by the applicant.
        proxyphone:
          type: string
          description: (Optional) phone number of the chosen proxy as supplied by the applicant
          maxLength: 50
        proxyemail:
          type: string
          description: (Optional) email address of the chosen proxy as supplied by the applicant
          format: email
          maxLength: 255
        proxyreason:
          type: string
          description: |
            A free-form text value containing the applicant’s response to the question “please explain why you are not able to go to your polling station on polling day” for the primary form variant or other text for other form variants (see “Proxy Vote reasons” below) (max 500 utf-8 chars)
          maxLength: 500
      required:
        - proxystreet

  #
  # Response Body Definitions
  # --------------------------------------------------------------------------------
  responses:
    PendingRegisterChecks:
      description: Contains pending Register Checks for the calling ERO's EMS system to process.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PendingRegisterChecksResponse'

    AdminPendingRegisterChecks:
      description: Contains pending Register Checks requested by an EROP admin.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminPendingRegisterChecksResponse'
  #
  # Request Body Definitions
  # --------------------------------------------------------------------------------
  requestBodies:
    RegisterCheckResult:
      description: The result of a Register Check (performed by an ERO's EMS system), which may contain a positive match or otherwise.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterCheckResultRequest'
  securitySchemes:
    emsCertificateLambdaAuthorizer:
      type: 'apiKey'
      name: 'Authorization'
      in: 'header'
      x-amazon-apigateway-authtype: 'custom'
      x-amazon-apigateway-authorizer:
        type: 'request'
        authorizerUri: '${ems_certificate_authorizer_id}'
        authorizerCredentials: '${ems_certificate_authorizer_role}'
        authorizerPayloadFormatVersion: '1.0'
        authorizerResultTtlInSeconds: 0
    awsIamAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
